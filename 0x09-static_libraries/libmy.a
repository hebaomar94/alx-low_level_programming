!<arch>
0-isupper.c/    0           0     0     644     222       `
#include "main.h"

/**
 * _isupper - evalue if letter is uppercase .
 *@c: print int
 * Return: Always 0.
 */

int _isupper(int c)

{

	if (c >= 'A' && c <= 'Z')

	{

		return (1);

	}



	else

	{

		return (0);

	}



}
0-memset.c/     0           0     0     644     383       `
#include "main.h"

/**
 * _memset - a function that fills the first n bytes with a constn byte b
 * @b: the constant charcter or byte
 * @n: the fist n elements
 * @s: the array or pointer
 * Return: s which is the pointer or the array
 */


char *_memset(char *s, char b, unsigned int n)
{

		unsigned int i;
		
		for (i = 0; i < n; i++)

		{

			s[i] = b;

		}

				return (s);

}

0-strcat.c/     0           0     0     644     420       `
#include "main.h"

/**
 *_strcat - concatenates two strings
 *@dest: A pointer to a character that will be changed
 *@src: A pointer to a character that will also be changed
 *Return: dest
 */

char *_strcat(char *dest, char *src)

{

	int i, j;



	i = 0;

	while (dest[i] != '\0')

	{

		i++;

	}



	j = 0;

	while (src[j] != '\0')

	{

		dest[i] = src[j];

		j++;

		i++;

	}

	dest[i] = '\0';



	return (dest);

}
100-atoi.c/     0           0     0     644     1111      `
#include "main.h"

#include <stdio.h>

/**
 *
 *  *_atoi - converts a string to an integer.
 *
 *   *@s: pointer to string.
 *
 *    *
 *
 *     *Return: integer gotten.
 *
 *      */

int _atoi(char *s)

{

		int index, ind2;

			unsigned int res;

				int sign = 1;

					char now;



						index = 0;

							res = 0;

								while (*(s + index) != '\0')

										{

													now = *(s + index);

															if (now == '-')

																		{

																						sign *= -1;

																								}

																	if (now >= '0' && now <= '9')

																				{

																								ind2 = index;

																											while (*(s + ind2) > 47 && *(s + ind2) < 58)

																															{

																																				res = (res * 10) + *(s + ind2) - '0';

																																								ind2++;

																																											}

																														break;

																																}

																			index++;

																				}

									if (sign < 0)

												res *= sign;

										return (res);

}

1-isdigit.c/    0           0     0     644     193       `
#include "main.h"

/**
 * _isdigit - if is a digit
 *@c: print int
 * Return: Always 0.
 */

int _isdigit(int c)

{
	if ( c >= 48 && c <= 57)
	{
		return (1);
	}

	else
	{
	
		return (0);
	}
}

1-memcpy.c/     0           0     0     644     486       `
#include "main.h"

/**
 *_memcpy -   copy number bytes form adress "from" to adress "to"
 *@dest: content is to be copied
 *@src: Source of data to be copied
 *@n: bytes of the memory
 *Return: dest
 */



char *_memcpy(char *dest, char *src, unsigned int n)
{

		unsigned int i;



			i = 0;

				while (i < n)  /*Delacring WHILE*/

						{

									*(dest + i) = *(src + i); /*add 1 position dest and src*/

											i++;



												} /*END WHILE*/





					return (dest);

}
1-strncat.c/    0           0     0     644     451       `
#include "main.h"

/**
 *_strncat - concatenates two strings
 *@dest: A pointer to a character that will be changed
 *@src: A pointer to a character that will be changed
 *@n: value
 *Return: dest
 */



char *_strncat(char *dest, char *src, int n)



{

	int i, j;



	i = 0;

	while (dest[i] != '\0')

	{

		i++;

	}



	j = 0;

	while (j < n && src[j] != '\0')

	{

		dest[i] = src[j];

		j++;

		i++;

	}



	dest[i] = '\0';



	return (dest);

}

2-strchr.c/     0           0     0     644     503       `
#include "main.h"

/**
 * _strchr - Locates a character in a string
 * @s: String
 * @c: Character to search
 * Return: Pointer to the first occurrence of the character c in the string s
 **/



char *_strchr(char *s, char c)
{

while (*s != '\0') /*Declaring WHILE*/

{

if (*s == c) /*if s ==  c*/
										{

														return (s); /*return s*/

																}



									++s;

										}



			if (*s == c)

					{

								return (s);



									}





				return (0);/* values null*/

}

2-strlen.c/     0           0     0     644     235       `
#include "main.h"
#include <stdio.h>

/**
 *_strlen - return the length of a str
 *@s: string
 *Return: lenght of a str
 */

int _strlen(char *s)
{
		int i;


		i = 0;

		while (*s != '\0')
		{
			i++ ;
			s++ ;

		}

		return (i);

}

2-strncpy.c/    0           0     0     644     413       `
#include "main.h"

/**
 *_strncpy - copies a string
 *@dest: A pointer to a character that will be changed
 *@src: A pointer to a character that will be changed
 *@n: value
 *Return: dest
 */



char *_strncpy(char *dest, char *src, int n)



{

	int i;



	i = 0;

	while (i < n && src[i] != '\0')

	{

		dest[i] = src[i];

		i++;

	}



	while (i < n)

	{

		dest[i] = '\0';

		i++;

	}



	return (dest);



}

3-islower.c/    0           0     0     644     251       `
#include "main.h"

/**
 *  * _islower - Short description, single line
 *   * @c: contains value to be compared
 *
 * Return: Always 0.
 */

int _islower(int c)



{
	if (c > 'a' && c < 'z')

	{

		return (1);

	}



	else

	{

		return (0);

	}



}

3-puts.c/       0           0     0     644     283       `
#include"main.h"



/**
 ** _puts - prints a string, followed by a newline to stdout
 * @str: string parameter to print
 * Return: Nothing
 */



void _puts(char *str)

{

		while (*str != '\0')

				{

							_putchar(*str + 0);

									++str;

										}

			_putchar('\n');

}

3-strcmp.c/     0           0     0     644     435       `
#include "main.h"

/**
 *_strcmp - compares two strings
 *@s1: A pointer to a character that will be changed
 *@s2: A pointer to a character that will also be changed/modified/updated
 *Return: dest
 */

int _strcmp(char *s1, char *s2)



{



	char *str_one = s1;

	char *str_two = s2;





	while (*str_one != '\0' && *str_two != '\0' && *str_one == *str_two)

	{

		str_one++;

		str_two++;

	}



	return (*str_one - *str_two);

}

3-strspn.c/     0           0     0     644     1106      `
#include "main.h"
/**
 * _strspn - Locates a character in a string
 * @s: This is the main C string to be scanned.
 *
* @accept: This is the string containing the list of characters
* Return: return count
 **/



unsigned int _strspn(char *s, char *accept)

{

		int i, j;

			int count = 0;

				char *str1, *str2;



					str1 = s;

						str2 = accept;



							i = 0;

								while (str1[i] != '\0') /*Declaring WHILE *s */

										{

													j = 0;

															while (str2[j] != '\0') /*Declaring WHILE *accept*/

																		{

																						if (str2[j] == str1[i]) /*Evaluate condition*/

																										{

																															count++; /*count number*/

																																			break;

																																						}



																									j++;    /*add j+1*/

																											}



																	if (s[i] != accept[j]) /*If aren't equals*/

																				{

																								break;

																										}



																			i++; /*add x+1*/

																				}



			return (count);
}
4-isalpha.c/    0           0     0     644     283       `
#include "main.h"


/**
 * _isalpha - Return 1 if c is a letter. lowercase or uppercase
 * *
 *@c: The int to print
 * Return: Always 0.
 */



int _isalpha(int c)



{



	if ((c > 'a' && c < 'z') || (c > 'A' && c < 'Z'))

	{

		return (1);

	}



	else

	{

		return (0);

	}



}

4-strpbrk.c/    0           0     0     644     723       `
#include "main.h"

/**
 * _strpbrk - matches any character specified
 * @s: This is the C string to be scanned.
 * @accept:character in str1 that matches one of the characters in str2
 *Return: string s that matches any character specified in accept
 **/



char *_strpbrk(char *s, char *accept)
{

		int j;



			while (*s != '\0') /*Declaring WHILE*/

					{

								j = 0;

										while (accept[j] != '\0')  /*Evaluating *accept*/

													{

																	if (*s == accept[j])

																					{

																										return (s);

																													}



																				j++; /*add j+1*/

																						}



												s++; /*add s+1*/

													}

				return (0);



}

5-strstr.c/     0           0     0     644     756       `
#include "main.h"
/**
 * _strstr - first occurrence of the substring needle in the string haystack
 * @haystack: main str to be examined
 * @needle: searched in haystack
 * Return: return 0
 **/



char  *_strstr(char *haystack, char *needle)
{

		char *str1, *str2; /*Declaring variables*/



			while (*haystack != '\0')

					{

								str1 = haystack; /*values*/

										str2 = needle;



												/*Star WHILE*/

												while (*haystack != '\0' && *str2 != '\0' && *haystack == *str2)

															{

																			haystack++;

																						str2++;

																								}

														if (*str2 == '\0')

																		return (str1);

																haystack = str1 + 1;

																	}

				return (0);

}
6-abs.c/        0           0     0     644     273       `
#include "main.h"

#include <stdio.h>



/**
 * _abs - value absolute
 *   *
 *@n: The int to print
 * Return: Always 0.
 */



int _abs(int n)

{



	if (n < 0)

	{

		return (n * (-1));

	}



	else if (n == 0)

	{

		return (0);

	}



	else

	{

		return (n);

	}



}

9-strcpy.c/     0           0     0     644     342       `
#include "main.h"
#include <stdio.h>

/**
 * _strcpy - Copy a string
 * @dest: Destination value
 * @src: Source value
 * Return: the pointer to dest
 */

char *_strcpy(char *dest, char *src)

{

		int i;



			for (i = 0; src[i] != '\0'; i++)

					{

								dest[i] = src[i];

									}



				dest[i++] = '\0';



					return (dest);

}
_putchar.c/     0           0     0     644     250       `
#include <unistd.h>



/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */

int _putchar(char c)
{

	return (write(1, &c, 1));

}i
